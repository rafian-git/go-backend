syntax="proto3";

package apierror;

option go_package = "github.com/rafian-git/go-backend/pkg/apierror;apierror";

import "gogoproto/gogo.proto";

import "google/protobuf/any.proto";
import "google/protobuf/duration.proto";
// import "google/protobuf/struct.proto";
// import "google/protobuf/timestamp.proto";
// import "google/protobuf/wrappers.proto";
// import "google/protobuf/empty.proto";
// import "google/protobuf/field_mask.proto";

// the tests fails for a reason; probably because of an extension or
// options such as a casttype
option (gogoproto.testgen_all) = false;

option (gogoproto.equal_all) = true;
option (gogoproto.verbose_equal_all) = true;

option (gogoproto.gostring_all) = true;
option (gogoproto.goproto_stringer_all) = false;
option (gogoproto.stringer_all) =  true;

option (gogoproto.populate_all) = true;

option (gogoproto.marshaler_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.unmarshaler_all) = true;

// disable XXX_*-fields
option (gogoproto.goproto_unkeyed_all) = false;
option (gogoproto.goproto_unrecognized_all) = false;
option (gogoproto.goproto_sizecache_all) = false;

//
// codes
//

// The canonical error codes for gRPC APIs.
//
//
// Sometimes multiple error codes may apply.  Services should return
// the most specific error code that applies.  For example, prefer
// `OutOfRange` over `FailedPrecondition` if both codes apply.
// Similarly prefer `NotFound` or `AlreadyExists` over `FailedPrecondition`.
enum Code {
  option (gogoproto.goproto_enum_prefix) = false;

  // Not an error; returned on success
  //
  // HTTP Mapping: 200 OK
  OK = 0 [(gogoproto.enumvalue_customname) = "OK"];

  // The operation was canceled, typically by the caller.
  //
  // HTTP Mapping: 499 Client Closed Request
  Canceled = 1 [(gogoproto.enumvalue_customname) = "Canceled"]; 

  // Unknown error.  For example, this error may be returned when
  // a `Status` value received from another address space belongs to
  // an error space that is not known in this address space.  Also
  // errors raised by APIs that do not return enough error information
  // may be converted to this error.
  //
  // HTTP Mapping: 500 Internal Server Error
  Unknown = 2 [(gogoproto.enumvalue_customname) = "Unknown"];

  // The client specified an invalid argument.  Note that this differs
  // from `FailedPrecondition`.  `InvalidArgument` indicates arguments
  // that are problematic regardless of the state of the system
  // (e.g., a malformed file name).
  //
  // HTTP Mapping: 400 Bad Request
  InvalidArgument = 3 [(gogoproto.enumvalue_customname) = "InvalidArgument"];

  // The deadline expired before the operation could complete. For operations
  // that change the state of the system, this error may be returned
  // even if the operation has completed successfully.  For example, a
  // successful response from a server could have been delayed long
  // enough for the deadline to expire.
  //
  // HTTP Mapping: 504 Gateway Timeout
  DeadlineExceeded = 4 [(gogoproto.enumvalue_customname) = "DeadlineExceeded"];

  // Some requested entity (e.g., file or directory) was not found.
  //
  // Note to server developers: if a request is denied for an entire class
  // of users, such as gradual feature rollout or undocumented whitelist,
  // `NOT_FOUND` may be used. If a request is denied for some users within
  // a class of users, such as user-based access control, `PermissionDenied`
  // must be used.
  //
  // HTTP Mapping: 404 Not Found
  NotFound = 5 [(gogoproto.enumvalue_customname) = "NotFound"];

  // The entity that a client attempted to create (e.g., file or directory)
  // already exists.
  //
  // HTTP Mapping: 409 Conflict
  AlreadyExists = 6 [(gogoproto.enumvalue_customname) = "AlreadyExists"];

  // The caller does not have permission to execute the specified
  // operation. `PermissionDenied` must not be used for rejections
  // caused by exhausting some resource (use `ResourceExhausted`
  // instead for those errors). `PermissionDenied` must not be
  // used if the caller can not be identified (use `Unauthenticated`
  // instead for those errors). This error code does not imply the
  // request is valid or the requested entity exists or satisfies
  // other pre-conditions.
  //
  // HTTP Mapping: 403 Forbidden
  PermissionDenied = 7 [(gogoproto.enumvalue_customname) = "PermissionDenied"];

  // The request does not have valid authentication credentials for the
  // operation.
  //
  // HTTP Mapping: 401 Unauthorized
  Unauthenticated = 16 [(gogoproto.enumvalue_customname) = "Unauthenticated"];

  // Some resource has been exhausted, perhaps a per-user quota, or
  // perhaps the entire file system is out of space.
  //
  // HTTP Mapping: 429 Too Many Requests
  ResourceExhausted = 8 [(gogoproto.enumvalue_customname) = "ResourceExhausted"];

  // The operation was rejected because the system is not in a state
  // required for the operation's execution.  For example, the directory
  // to be deleted is non-empty, an rmdir operation is applied to
  // a non-directory, etc.
  //
  // Service implementors can use the following guidelines to decide
  // between `FailedPrecondition`, `Aborted`, and `Unavailable`:
  //  (a) Use `Unavailable` if the client can retry just the failing call.
  //  (b) Use `Aborted` if the client should retry at a higher level
  //      (e.g., when a client-specified test-and-set fails, indicating the
  //      client should restart a read-modify-write sequence).
  //  (c) Use `FailedPrecondition` if the client should not retry until
  //      the system state has been explicitly fixed.  E.g., if an "rmdir"
  //      fails because the directory is non-empty, `FailedPrecondition`
  //      should be returned since the client should not retry unless
  //      the files are deleted from the directory.
  //
  // HTTP Mapping: 400 Bad Request
  FailedPrecondition = 9 [(gogoproto.enumvalue_customname) = "FailedPrecondition"];

  // The operation was Aborted, typically due to a concurrency issue such as
  // a sequencer check failure or transaction abort.
  //
  // See the guidelines above for deciding between `FailedPrecondition`,
  // `Aborted`, and `Unavailable`.
  //
  // HTTP Mapping: 409 Conflict
  Aborted = 10 [(gogoproto.enumvalue_customname) = "Aborted"];

  // The operation was attempted past the valid range.  E.g., seeking or
  // reading past end-of-file.
  //
  // Unlike `InvalidArgument`, this error indicates a problem that may
  // be fixed if the system state changes. For example, a 32-bit file
  // system will generate `InvalidArgument` if asked to read at an
  // offset that is not in the range [0,2^32-1], but it will generate
  // `OutOfRange` if asked to read from an offset past the current
  // file size.
  //
  // There is a fair bit of overlap between `FailedPrecondition` and
  // `OutOfRange`.  We recommend using `OutOfRange` (the more specific
  // error) when it applies so that callers who are iterating through
  // a space can easily look for an `OutOfRange` error to detect when
  // they are done.
  //
  // HTTP Mapping: 400 Bad Request
  OutOfRange = 11 [(gogoproto.enumvalue_customname) = "OutOfRange"];

  // The operation is not implemented or is not supported/enabled in this
  // service.
  //
  // HTTP Mapping: 501 Not Implemented
  Unimplemented = 12 [(gogoproto.enumvalue_customname) = "Unimplemented"];

  // Internal errors.  This means that some invariants expected by the
  // underlying system have been broken.  This error code is reserved
  // for serious errors.
  //
  // HTTP Mapping: 500 Internal Server Error
  Internal = 13 [(gogoproto.enumvalue_customname) = "Internal"];

  // The service is currently Unavailable.  This is most likely a
  // transient condition, which can be corrected by retrying with
  // a backoff. Note that it is not always safe to retry
  // non-idempotent operations.
  //
  // See the guidelines above for deciding between `FailedPrecondition`,
  // `Aborted`, and `Unavailable`.
  //
  // HTTP Mapping: 503 Service Unavailable
  Unavailable = 14 [(gogoproto.enumvalue_customname) = "Unavailable"];

  // Unrecoverable data loss or corruption.
  //
  // HTTP Mapping: 500 Internal Server Error
  DataLoss = 15 [(gogoproto.enumvalue_customname) = "DataLoss"];
}

//
// details
//

// Describes when the clients can retry a failed request. Clients could ignore
// the recommendation here or retry when this information is missing from error
// responses.
//
// It's always recommended that clients should use exponential backoff when
// retrying.
//
// Clients should wait until `retry_delay` amount of time has passed since
// receiving the error response before retrying.  If retrying requests also
// fail, clients should use an exponential backoff scheme to gradually increase
// the delay between retries based on `retry_delay`, until either a maximum
// number of retries have been reached or a maximum retry delay cap has been
// reached.
message RetryInfo {
  // Clients should wait at least this long between retrying the same request.
  google.protobuf.Duration retry_delay = 1 [(gogoproto.customname) = "RetryDelay"];
}

// Describes additional debugging info.
message DebugInfo {
  // The stack trace entries indicating where the error occurred.
  repeated string stack_entries = 1 [(gogoproto.customname) = "StackEntries"];

  // Additional debugging information provided by the server.
  string detail = 2 [(gogoproto.customname) = "Detail"];
}

// Describes how a quota check failed.
//
// For example if a daily limit was exceeded for the calling project,
// a service could respond with a QuotaFailure detail containing the project
// id and the description of the quota limit that was exceeded.  If the
// calling project hasn't enabled the service in the developer console, then
// a service could respond with the project id and set `service_disabled`
// to true.
//
// Also see RetryInfo and Help types for other details about handling a
// quota failure.
message QuotaFailure {
  // A message type used to describe a single quota violation.  For example, a
  // daily quota or a custom quota that was exceeded.
  message Violation {
    // The subject on which the quota check failed.
    // For example, "clientip:<ip address of client>" or "project:<Google
    // developer project id>".
    string subject = 1 [(gogoproto.customname) = "Subject"];

    // A description of how the quota check failed. Clients can use this
    // description to find more about the quota configuration in the service's
    // public documentation, or find the relevant quota limit to adjust through
    // developer console.
    //
    // For example: "Service disabled" or "Daily Limit for read operations
    // exceeded".
    string description = 2 [(gogoproto.customname) = "Description"];
  }

  // Describes all quota violations.
  repeated Violation violations = 1 [(gogoproto.customname) = "Violations"];
}

// Describes the cause of the error with structured details.
//
// Example of an error when contacting the "pubsub.googleapis.com" API when it
// is not enabled:
//
//     { "reason": "API_DISABLED"
//       "domain": "googleapis.com"
//       "metadata": {
//         "resource": "projects/123",
//         "service": "pubsub.googleapis.com"
//       }
//     }
//
// This response indicates that the pubsub.googleapis.com API is not enabled.
//
// Example of an error that is returned when attempting to create a Spanner
// instance in a region that is out of stock:
//
//     { "reason": "STOCKOUT"
//       "domain": "spanner.googleapis.com",
//       "metadata": {
//         "availableRegions": "us-central1,us-east2"
//       }
//     }
message ErrorInfo {
  // The reason of the error. This is a constant value that identifies the
  // proximate cause of the error. Error reasons are unique within a particular
  // domain of errors. This should be at most 63 characters and match
  // /[A-Z0-9_]+/.
  string reason = 1 [(gogoproto.customname) = "Reason"];

  // The logical grouping to which the "reason" belongs. The error domain
  // is typically the registered service name of the tool or product that
  // generates the error. Example: "pubsub.googleapis.com". If the error is
  // generated by some common infrastructure, the error domain must be a
  // globally unique value that identifies the infrastructure. For Google API
  // infrastructure, the error domain is "googleapis.com".
  string domain = 2 [(gogoproto.customname) = "Domain"];

  // Additional structured details about this error.
  //
  // Keys should match /[a-zA-Z0-9-_]/ and be limited to 64 characters in
  // length. When identifying the current value of an exceeded limit, the units
  // should be contained in the key, not the value.  For example, rather than
  // {"instanceLimit": "100/request"}, should be returned as,
  // {"instanceLimitPerRequest": "100"}, if the client exceeds the number of
  // instances that can be created in a single (batch) request.
  map<string, string> metadata = 3 [(gogoproto.customname) = "Metadata"];

  string label = 4 [(gogoproto.customname) = "Label"];
}

// Describes what preconditions have failed.
//
// For example, if an RPC failed because it required the Terms of Service to be
// acknowledged, it could list the terms of service violation in the
// PreconditionFailure message.
message PreconditionFailure {
  // A message type used to describe a single precondition failure.
  message Violation {
    // The type of PreconditionFailure. We recommend using a service-specific
    // enum type to define the supported precondition violation subjects. For
    // example, "TOS" for "Terms of Service violation".
    string type = 1 [(gogoproto.customname) = "Type"];

    // The subject, relative to the type, that failed.
    // For example, "google.com/cloud" relative to the "TOS" type would indicate
    // which terms of service is being referenced.
    string subject = 2 [(gogoproto.customname) = "Subject"];

    // A description of how the precondition failed. Developers can use this
    // description to understand how to fix the failure.
    //
    // For example: "Terms of service not accepted".
    string description = 3 [(gogoproto.customname) = "Description"];
  }

  // Describes all precondition violations.
  repeated Violation violations = 1 [(gogoproto.customname) = "Violations"];
}

// Describes violations in a client request. This error type focuses on the
// syntactic aspects of the request.
message BadRequest {
  // A message type used to describe a single bad request field.
  message FieldViolation {
    // A path leading to a field in the request body. The value will be a
    // sequence of dot-separated identifiers that identify a protocol buffer
    // field. E.g., "field_violations.field" would identify this field.
    string field = 1 [(gogoproto.customname) = "Field"];

    // A description of why the request element is bad.
    string description = 2 [(gogoproto.customname) = "Description"];
  }

  // Describes all violations in a client request.
  repeated FieldViolation field_violations = 1 [(gogoproto.customname) = "FieldViolations"];
}

// Contains metadata about the request that clients can attach when filing a bug
// or providing other forms of feedback.
message RequestInfo {
  // An opaque string that should only be interpreted by the service generating
  // it. For example, it can be used to identify requests in the service's logs.
  string request_id = 1 [(gogoproto.customname) = "RequestID"];

  // Any data that was used to serve this request. For example, an encrypted
  // stack trace that can be sent back to the service provider for debugging.
  string serving_data = 2 [(gogoproto.customname) = "ServingData"];
}

// Describes the resource that is being accessed.
message ResourceInfo {
  // A name for the type of resource being accessed, e.g. "sql table",
  // "cloud storage bucket", "file", "Google calendar"; or the type URL
  // of the resource: e.g. "type.googleapis.com/google.pubsub.v1.Topic".
  string resource_type = 1 [(gogoproto.customname) = "ResourceType"];

  // The name of the resource being accessed.  For example, a shared calendar
  // name: "example.com_4fghdhgsrgh@group.calendar.google.com", if the current
  // error is [google.rpc.Code.PermissionDenied][google.rpc.Code.PermissionDenied].
  string resource_name = 2 [(gogoproto.customname) = "ResourceName"];

  // The owner of the resource (optional).
  // For example, "user:<owner email>" or "project:<Google developer project
  // id>".
  string owner = 3 [(gogoproto.customname) = "Owner"];

  // Describes what error is encountered when accessing this resource.
  // For example, updating a cloud project may require the `writer` permission
  // on the developer console project.
  string description = 4 [(gogoproto.customname) = "Description"];
}

// Provides links to documentation or for performing an out of band action.
//
// For example, if a quota check failed with an error indicating the calling
// project hasn't enabled the accessed service, this can contain a URL pointing
// directly to the right place in the developer console to flip the bit.
message Help {
  // Describes a URL link.
  message Link {
    // Describes what the link offers.
    string description = 1 [(gogoproto.customname) = "Description"];

    // The URL of the link.
    string url = 2 [(gogoproto.customname) = "URL"];
  }

  // URL(s) pointing to additional information on handling the current error.
  repeated Link links = 1 [(gogoproto.customname) = "Links"];
}

// Provides a localized error message that is safe to return to the user
// which can be attached to an RPC error.
message LocalizedMessage {
  // The locale used following the specification defined at
  // http://www.rfc-editor.org/rfc/bcp/bcp47.txt.
  // Examples are: "en-US", "fr-CH", "es-MX"
  string locale = 1 [(gogoproto.customname) = "Locale"];

  // The localized error message in the above locale.
  string message = 2 [(gogoproto.customname) = "Message"];
}

//
// status
//

// The `Status` type defines a logical error model that is suitable for
// different programming environments, including REST APIs and RPC APIs. It is
// used by [gRPC](https://github.com/grpc). Each `Status` message contains
// three pieces of data: error code, error message, and error details.
//
// You can find out more about this error model and how to work with it in the
// [API Design Guide](https://cloud.google.com/apis/design/errors).
message Status {
  // The status code, which should be an enum value of [google.rpc.Code][google.rpc.Code].
  Code code = 1 [(gogoproto.customname) = "Code"];

  // A developer-facing error message, which should be in English. Any
  // user-facing error message should be localized and sent in the
  // [google.rpc.Status.details][google.rpc.Status.details] field, or localized by the client.
  string message = 2 [(gogoproto.customname) = "Message"];

  // A list of messages that carry the error details.  There is a common set of
  // message types for APIs to use.
  repeated google.protobuf.Any details = 3 [(gogoproto.customname) = "Details"];
}
